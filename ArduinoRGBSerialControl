#include <SoftwareSerial.h>

//definirani pwm izlaza
const int redPin = 3;
const int greenPin = 5;
const int bluePin = 6;

//definirane vrijednosti pwm izlaza
int redInt=0,greenInt=0,blueInt=0;

//stringovi
String inputString = "";//string koji učita sa serijskog
String nullString = "";//string za reset
String prefixString = "";//pomoćni string
String sufixString = "";//pomoćni string
String percentString = "%";//pomoćni string

void setup() {

  Serial.begin(9600);//serijska veza na 9600bps

  //definiranje outputa
  pinMode(redPin, OUTPUT); 
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT); 
}

void loop() {

  //demo pri paljenju
  if (inputString == nullString) dynamicRGB(50,255);

  else if(inputString == "pF") pulse(2,1500,255);

  else if(inputString == "dF") dynamicRGB(20,255);

  else if(inputString == "r"){//red
    redInt=255;
    greenInt=0;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "o"){//orange
    redInt=255;
    greenInt=128;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "y"){//y
    redInt=255;
    greenInt=255;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "yg" || inputString == "gy"){//yellow-green
    redInt=128;
    greenInt=255;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "g"){//green
    redInt=0;
    greenInt=255;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "gb" || inputString == "bg"){//green-blue
    redInt=0;
    greenInt=255;
    blueInt=128;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "c"){//cyan
    redInt=0;
    greenInt=255;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "a"){//azure
    redInt=0;
    greenInt=128;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "b"){//blue
    redInt=0;
    greenInt=0;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "v"){//violet
    redInt=128;
    greenInt=0;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "m"){//magenta
    redInt=255;
    greenInt=0;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "p"){//pink
    redInt=255;
    greenInt=0;
    blueInt=128;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "w"){//pink
    redInt=255;
    greenInt=255;
    blueInt=255;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(inputString == "0"){
    redInt=0;
    greenInt=0;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else pretvorba();

    delay(100);
}

void serialEvent() {
  inputString=nullString;
  while (Serial.available() > 0) {
    inputString +=char(Serial.read());
 // delay(10); 
  }
}

void pretvorba(){
  
  char numChar[4];
  int numInt;
  
  //odvajanje stringa
  prefixString = inputString.substring(0,inputString.indexOf(':'));
  sufixString = inputString.substring(inputString.indexOf(':')+1,inputString.length());
  
  if (prefixString == "rgb"){
    
    char redChar[4], greenChar[4], blueChar[4]; 
    String redString = sufixString.substring(0,sufixString.indexOf(','));
    redString.toCharArray(redChar, 4);
    redInt = atoi(redChar);
    
    String greenString = sufixString.substring(sufixString.indexOf(',')+1,sufixString.lastIndexOf(','));
    greenString.toCharArray(greenChar, 4);
    greenInt = atoi(greenChar);
    
    String blueString = sufixString.substring(sufixString.lastIndexOf(',')+1,sufixString.length());
    blueString.toCharArray(blueChar, 4);
    blueInt = atoi(blueChar);
    
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else if (prefixString == "dF"){  
    int FADESPEED = 10;
    int Brightness = 100;
    
    char FADESPEEDChar[10], BrightnessChar[4];
    
    String FADESPEEDString = sufixString.substring(0,sufixString.indexOf(','));
    FADESPEEDString.toCharArray(FADESPEEDChar, 10);
    FADESPEED = atoi(FADESPEEDChar);
    
    String BrightnessString = sufixString.substring(sufixString.indexOf(',')+1,sufixString.length());
    BrightnessString.toCharArray(BrightnessChar, 4);
    Brightness = atoi(BrightnessChar);
    dynamicRGB(FADESPEED, Brightness);
  }
  
  else if (prefixString == "pF"){
    
    int pulsN0 = 2;
    int FADESPEED = 10;
    int Brightness = 100;
    
    char pulsN0Char[4], FADESPEEDChar[10], BrightnessChar[4];
    
    String pulsN0String = sufixString.substring(0,sufixString.indexOf(','));
    pulsN0String.toCharArray(pulsN0Char, 4);
    pulsN0 = atoi(pulsN0Char);
    
    String FADESPEEDString = sufixString.substring(sufixString.indexOf(',')+1,sufixString.lastIndexOf(','));
    FADESPEEDString.toCharArray(FADESPEEDChar, 10);
    FADESPEED = atoi(FADESPEEDChar);
    
    String BrightnessString = sufixString.substring(sufixString.lastIndexOf(',')+1,sufixString.length());
    BrightnessString.toCharArray(BrightnessChar, 4);
    Brightness = atoi(BrightnessChar);
    
    pulse(pulsN0,FADESPEED,Brightness);
  }
  
  else if(prefixString == "red"){
    
    
    if(sufixString.endsWith(percentString)==0){
      sufixString.toCharArray(numChar, 4); redInt = atoi(numChar);
    }
    
    else {
      sufixString = sufixString.substring(0,sufixString.length()-1);
      sufixString.toCharArray(numChar, 4); redInt = atoi(numChar);
      redInt = map(redInt, 0, 100, 0, 255);
    }
    
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else if(prefixString == "green"){
    
    
    if(sufixString.endsWith(percentString)==0){
      sufixString.toCharArray(numChar, 4); greenInt = atoi(numChar);
    }
    
    else {
      sufixString = sufixString.substring(0,sufixString.length()-1);
      sufixString.toCharArray(numChar, 4); greenInt = atoi(numChar);
      greenInt = map(greenInt, 0, 100, 0, 255);
    }
    
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else if(prefixString == "blue"){
    
    
    
    if(sufixString.endsWith(percentString)==0){
      sufixString.toCharArray(numChar, 4); blueInt = atoi(numChar);    
    }
    
    else {
      sufixString = sufixString.substring(0,sufixString.length()-1);
      sufixString.toCharArray(numChar, 4); blueInt = atoi(numChar);
      blueInt = map(blueInt, 0, 100, 0, 255);
    }
    
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else if(prefixString == "r"){//red
  
    if(sufixString.endsWith(percentString)==1){
      sufixString = sufixString.substring(0,sufixString.length()-1);
    }
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt=0;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt);
  }
  else if(prefixString == "o"){//orange
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt = map(numInt, 0, 100, 0, 128);
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "y"){//y
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
      
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "yg" || prefixString == "gy"){//yellow-green
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 128);
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "g"){//green
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt=0;
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "gb" || prefixString == "bg"){//green-blue
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt=0;
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt = map(numInt, 0, 100, 0, 128);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "c"){//cyan
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt=0;
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "a"){//azure
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt=0;
    greenInt = map(numInt, 0, 100, 0, 128);
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "b"){//blue
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt=0;
    greenInt=0;
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "v"){//violet
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 128);
    greenInt=0;
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "m"){//magenta
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt=0;
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "p"){//pink
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt=0;
    blueInt = map(numInt, 0, 100, 0, 128);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "w"){//pink
  
    if(sufixString.endsWith(percentString)==1)
      sufixString = sufixString.substring(0,sufixString.length()-1);
    
    sufixString.toCharArray(numChar, 4); numInt = atoi(numChar);
    
    redInt = map(numInt, 0, 100, 0, 255);
    greenInt = map(numInt, 0, 100, 0, 255);
    blueInt = map(numInt, 0, 100, 0, 255);
    staticRGB(redInt,greenInt,blueInt); 
  }
  else if(prefixString == "0"){
    redInt=0;
    greenInt=0;
    blueInt=0;
    staticRGB(redInt,greenInt,blueInt);
  }
  
  else staticRGB(100,100,100);
}

void dynamicRGB(int fs, int b){
  int a;
  
  while(redInt +  greenInt  + blueInt != 0){
    if(redInt != 0) redInt--;
    if(greenInt != 0) greenInt--;
    if(blueInt != 0) blueInt--;
    
    analogWrite(redPin, redInt);
    analogWrite(greenPin, greenInt);
    analogWrite(bluePin, blueInt);
    
    delay(fs);
  }
  
  delay(100);
  
  for (a = 0; a < b+1; a++) { 
    if (Serial.available() > 0) break;
    analogWrite(redPin, a);
    delay(fs);
  } 
  
  while (1){
    
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break; 
      analogWrite(bluePin, a);
      delay(fs);
    } 
  
    if (Serial.available() > 0) break;
  
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;
      analogWrite(redPin, a);
      delay(fs);
    }
    
    if (Serial.available() > 0) break;
  
    for (a = 0; a < b+1; a++) { 
      if (Serial.available() > 0) break;
      analogWrite(greenPin, a);
      delay(fs);
    } 
  
    if (Serial.available() > 0) break;
  
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;
      analogWrite(bluePin, a);
      delay(fs);
    } 
  
    if (Serial.available() > 0) break;
  
    for (a = 0; a < b+1; a++) { 
      if (Serial.available() > 0) break;
      analogWrite(redPin, a);
      delay(fs);
    } 
  
    if (Serial.available() > 0) break;
  
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;
      analogWrite(greenPin, a);
      delay(fs);
    }
  
    if (Serial.available() > 0) break;
  }
}

void staticRGB(int a, int b, int c){
  
  while(1){
    
    analogWrite(redPin, a);
    analogWrite(greenPin, b);
    analogWrite(bluePin, c);
    
    if(Serial.available() > 0) break;
  }
}

void pulse(int p,int fs, int b){
  
  int a=0,bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break;
      analogWrite(redPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) {
      if (Serial.available() > 0) break;  
      analogWrite(redPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break;
      analogWrite(redPin, a);
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(redPin, a);
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  
  while(bp<p);bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break;
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
    if (Serial.available() > 0) break;
      analogWrite(bluePin, a);
      analogWrite(greenPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(bluePin, a);
      analogWrite(greenPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;

  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break;
      analogWrite(greenPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(greenPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break; 
      analogWrite(greenPin, a);
      analogWrite(redPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(greenPin, a);
      analogWrite(redPin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;
  
  do{
    if (Serial.available() > 0) break;
    bp++;
    for (a = 0; a < b+1; a++) {
      if (Serial.available() > 0) break; 
      analogWrite(greenPin, a);
      analogWrite(redPin, a);
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
    for (a = b; a > 0; a--) { 
      if (Serial.available() > 0) break;  
      analogWrite(greenPin, a);
      analogWrite(redPin, a);
      analogWrite(bluePin, a);
      delayMicroseconds(fs);
    }
    if (Serial.available() > 0) break;
  }
  while(bp<p);bp=0;
}
